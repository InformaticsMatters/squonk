apiVersion: v1
kind: Template
metadata:
  name: squonk-postgres
  annotations:
    description: "This pre-configures Squonk Postgres database"
    tags: "squonk,postgres"
    template.openshift.io/provider-display-name: "Informatics Matters"
    template.openshift.io/support-url: "http://www.informaticsmatters.com"
labels:
  # Our policy is to match this with the APP_NAME
  # Sadly we cannot use ${{APP_NAME}} here.
  template: "squonk-postgres"

message: "Squonk Postgres has been deployed."

objects:

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-claim-1
    labels:
      app: ${APP_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: postgres-init-map
    labels:
      app: ${APP_NAME}
  data:
    init-postgres-db.sh: |
      #!/bin/bash

      PG_USER=${POSTGRES_USER:-postgres}
      echo "Setting up db as user ${PG_USER}"

      psql --username "$PG_USER" --command "CREATE USER keycloak WITH PASSWORD '${POSTGRES_KEYCLOAK_PASSWORD:-squonk}';"
      echo "created keycloak user with password ${POSTGRES_KEYCLOAK_PASSWORD:-squonk}"
      psql --username "$PG_USER" --command "CREATE USER xwiki WITH PASSWORD '${POSTGRES_XWIKI_PASSWORD:-squonk}';"
      echo "created xwiki user with password ${POSTGRES_XWIKI_PASSWORD:-squonk}"
      psql --username "$PG_USER" --command "CREATE USER squonk WITH PASSWORD '${POSTGRES_SQUONK_PASSWORD:-squonk}';"
      echo "created squonk user with password ${POSTGRES_SQUONK_PASSWORD:-squonk}"

      createdb --username "$PG_USER" -O $PG_USER squonk
      createdb --username "$PG_USER" -O keycloak keycloak
      createdb --username "$PG_USER" -O xwiki xwiki


      psql --username "$PG_USER" --command "GRANT CONNECT ON DATABASE squonk TO squonk;"
      psql --username "$PG_USER" -d squonk --command "CREATE SCHEMA users AUTHORIZATION ${PG_USER};"
      psql --username "$PG_USER" -d squonk --command "GRANT USAGE ON SCHEMA users TO squonk;"
      psql --username "$PG_USER" -d squonk --command "CREATE SCHEMA notebooks AUTHORIZATION squonk;"


      # patch 1. Create chemcentral database
      # docker exec -it -u postgres deploy_postgres_1 bash
      createdb --username "$PG_USER" -O $PG_USER chemcentral
      psql --username "$PG_USER" --command 'create extension rdkit' chemcentral
      psql --username "$PG_USER" -d chemcentral --command "CREATE SCHEMA vendordbs AUTHORIZATION squonk;"

# The healthchecks should really be baked into the container image.
# Tried this but not happy.
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: postgres-healthcheck-map
    labels:
      app: ${APP_NAME}
  data:
    docker-healthcheck.sh: "#!/bin/bash\nset -eo pipefail\n\nhost=\"$(hostname --ip-address
      || echo '127.0.0.1')\"\nuser=\"${POSTGRES_USER:-postgres}\"\nexport PGPASSWORD=\"${POSTGRES_PASSWORD:-}\"\n\nargs=(\n\t#
      force postgres to not use the local unix socket (test \"external\" connectibility)\n\t--host
      \"$host\"\n\t--username \"$user\"\n\t--quiet --no-align --tuples-only\n)\n\nif
      select=\"$(echo 'SELECT 1' | psql \"${args[@]}\")\" && [ \"$select\" = '1' ];
      then\n\texit 0\nfi\n\nexit 1\n\n"

- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      name: ${APP_NAME}
    template:
      metadata:
        labels:
          name: ${APP_NAME}
      spec:
        containers:
        - image: "informaticsmatters/rdkit_cartridge:${RDKIT_TAG}"
          name: ${APP_NAME}
          ports:
          - containerPort: 5432
            protocol: TCP
          # The readinessProbe does not work.
          # When you run this command from the terminal you
          # get an exit code of 0 (success). Somethign to do with
          # the shell-script privileges?
#          readinessProbe:
#            exec:
#              command:
#              - bash /etc/config/docker-healthcheck.sh
#            initialDelaySeconds: 15
#            timeoutSeconds: 5
#            periodSeconds: 10
          livenessProbe:
            # This probe results in PG issuing 'incomplete startup packet'
            # messages to the log. They're the result of probe
            # making a TCP connection but sending no traffic.
            initialDelaySeconds: 60
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
            # Default period is 10 seconds
            periodSeconds: 20
          resources:
            limits:
              cpu: ${{CPU_LIMIT}}
              memory: ${{MEM_LIMIT}}
            requests:
              cpu: ${{CPU_REQUEST}}
              memory: ${{MEM_REQUEST}}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgresql-data
          - mountPath: /docker-entrypoint-initdb.d
            name: init-config
          - mountPath: /etc/config
            name: healthcheck-config
        restartPolicy: Always
        volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: ${APP_NAME}-claim-1
        - name: init-config
          configMap:
            name: postgres-init-map
        - name: healthcheck-config
          configMap:
            name: postgres-healthcheck-map

- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    ports:
    - name: ${APP_NAME}
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP

parameters:

- name: APP_NAME
  value: "squonk-postgres"

- name: RDKIT_TAG
  description: The version tag for the RDKIT container version
  value: "Release_2016_03_1"

- name: CPU_REQUEST
  value: 500m
- name: CPU_LIMIT
  value: 1000m
- name: MEM_REQUEST
  value: 500Mi
- name: MEM_LIMIT
  value: 1Gi
