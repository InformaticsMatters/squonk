---

# Pickup environment variables that are normally set
# using `source setenv.sh`. We can also use
# variables from the squonk-infra role as the variables
# we use are exposed as facts there.

keycloak_logout_redirect_to: "{{ ansible_env.KEYCLOAK_LOGOUT_REDIRECT_TO }}"

oc_postgresql_service: "{{ ansible_env.OC_POSTGRESQL_SERVICE }}"
oc_squonk_host: "{{ ansible_env.OC_SQUONK_HOST }}"
oc_squonk_image_tag: "{{ ansible_env.OC_SQUONK_IMAGE_TAG }}"
oc_user: "{{ ansible_env.OC_USER }}"
oc_admin_password: "{{ ansible_env.OC_ADMIN_PASSWORD }}"
oc_user_password: "{{ ansible_env.OC_USER_PASSWORD }}"

squonk_guest_user: "{{ lookup('env', 'SQUONK_GUEST_USER') }}"
squonl_guest_password: "{{ lookup('env', 'SQUONK_GUEST_PASSWORD') }}"

# If set each deployment of Pods (infrastructure and squonk)
# will be followed by a monitoring step that waits for the
# expected Pods to initialise before moving on to the next step.
wait_for_pods: yes

# We can configure the 'standard-user' using a selenium script
# and a Chrome web-driver but this requires Chrome to be available,
# the driver to be on you r path and certificates to be properly
# deployed in order for selenium to work properly in "headless" mode.
# The automation works if configured not to use chrome in headless mode.
setup_keycloak: no

# Here PVs used by the application (the squonk-work-dir for example)
# are returned to an Available state if they're currently
# in a Released state. Note: it is the user's responsibility
# to protect themselves for data loss here. This will inspect the
# "state" of all PVs in the squonk *and* infrastructure projects.
recycle_released_pvs: yes

# Run the PV (NFS) creation?
use_nfs: yes

# Our root template directory
# (relative to the role_path directory)
t_dir: ../../../templates
