---

# Updates deployed application versions according to the prevailing
# variable values. If an image version has changed this playbook
# sets the DeploymentConfig's image to the desired value
# causing a re-deployment of the corresponding Pod.
#
# This playbook looks after versions for the Squonk Application Deployments.
# Specifically...
#
# - cellexecutor
# - chemservices-basic
# - coreservices
# - jobexecutor-keycloak
# - portal

- name: Login as The Squonk Developer
  shell: oc login {{ oc_master_url }} -u {{ oc_user }} -p {{ oc_user_password }}
  changed_when: False

- name: Move to Squonk Project
  shell: oc project {{ oc_project }}
  changed_when: False

- name: Get DC Information
  shell: oc get dc/{{ item }} -o json
  register: dc_result
  loop:
  - cellexecutor
  - chemservices-basic
  - coreservices
  - jobexecutor-keycloak
  - portal
  changed_when: False

# Here we build a map whose key is the image name
# (i.e. 'squonk/cellexecutor') and the value is a list containing
# the tag (i.e. 'latest') and the expected next version (a number).
# value[0] is the label and value[1] is the expected next version.
#
# Note: because the fact ('versions') is broken over multiple lines
#       YAML will insert a '\' for every '\'. So, what would normally be
#       '\\1' in the regex_replace becomes '\1'

- name: Extract Image Versions
  set_fact:
    versions: >-
      {{ versions|default({})
          | combine({
              item.stdout
              | from_json
              | json_query('spec.template.spec.containers[0].image')
              | regex_replace('(.+):.+', '\1'):
              [ item.stdout
                | from_json
                | json_query('spec.template.spec.containers[0].image')
                | regex_replace('.*:(.+)', '\1'),
                item.stdout
                | from_json
                | json_query('status.latestVersion') + 1
              ]
          })
      }}
  with_items: "{{ dc_result.results }}"
  changed_when: False
  no_log: Yes

# Now, if the image tags needs to change then we
# act on the corresponding DeploymentConfig
# by setting the new image and tag...

- name: Change CellExecutor
  shell: >
    oc set image dc/cellexecutor
    cellexecutor=squonk/cellexecutor:{{ oc_squonk_cell_image_tag }}
  when: versions['squonk/cellexecutor'][0] != oc_squonk_cell_image_tag

- name: Change ChemServices
  shell: >
    oc set image dc/chemservices-basic
    chemservices-basic=squonk/chemservices-basic:{{ oc_squonk_cell_image_tag }}
  when: versions['squonk/chemservices-basic'][0] != oc_squonk_chem_image_tag

- name: Change CoreServices
  shell: >
    oc set image dc/coreservices
    coreservices=squonk/coreservices:{{ oc_squonk_core_image_tag }}
  when: versions['squonk/coreservices'][0] != oc_squonk_core_image_tag

- name: Change JobExecutor
  shell: >
    oc set image dc/jobexecutor-keycloak
    jobexecutor-keycloak=squonk/jobexecutor-keycloak:{{ oc_squonk_je_image_tag }}
  when: versions['squonk/jobexecutor-keycloak'][0] != oc_squonk_je_image_tag

- name: Change Portal
  shell: >
    oc set image dc/portal
    portal=squonk/portal:{{ oc_squonk_portal_image_tag }}
  when: versions['squonk/portal'][0] != oc_squonk_portal_image_tag

# And now wait for the various Pods...

- name: Wait for new CellExecutor to rollout
  shell: oc get dc/cellexecutor -o yaml
  register: dc_result
  until: dc_result.stdout | regex_search(pattern % new_version, multiline=True)
  delay: 20
  retries: "{{ (pod_ready_timeout | int / 20) | int }}"
  vars:
    pattern: '^.*controller "cellexecutor-%s" successfully rolled.*$'
    new_version: "{{ versions['squonk/cellexecutor'][1] }}"
  when: versions['squonk/cellexecutor'][0] != oc_squonk_cell_image_tag

- name: Wait for new ChemServices to rollout
  shell: oc get dc/chemservices-basic -o yaml
  register: dc_result
  until: dc_result.stdout | regex_search(pattern % new_version, multiline=True)
  delay: 20
  retries: "{{ (pod_ready_timeout | int / 20) | int }}"
  vars:
    pattern: '^.*controller "chemservices-basic-%s" successfully rolled.*$'
    new_version: "{{ versions['squonk/chemservices-basic'][1] }}"
  when: versions['squonk/chemservices-basic'][0] != oc_squonk_chem_image_tag

- name: Wait for new CoreServices to rollout
  shell: oc get dc/coreservices -o yaml
  register: dc_result
  until: dc_result.stdout | regex_search(pattern % new_version, multiline=True)
  delay: 20
  retries: "{{ (pod_ready_timeout | int / 20) | int }}"
  vars:
    pattern: '^.*controller "coreservices-%s" successfully rolled.*$'
    new_version: "{{ versions['squonk/coreservices'][1] }}"
  when: versions['squonk/coreservices'][0] != oc_squonk_core_image_tag

- name: Wait for new JobExecutor to rollout
  shell: oc get dc/jobexecutor-keycloak -o yaml
  register: dc_result
  until: dc_result.stdout | regex_search(pattern % new_version, multiline=True)
  delay: 20
  retries: "{{ (pod_ready_timeout | int / 20) | int }}"
  vars:
    pattern: '^.*controller "jobexecutor-keycloak-%s" successfully rolled.*$'
    new_version: "{{ versions['squonk/jobexecutor-keycloak'][1] }}"
  when: versions['squonk/jobexecutor-keycloak'][0] != oc_squonk_je_image_tag

- name: Wait for new Portal to rollout
  shell: oc get dc/portal -o yaml
  register: dc_result
  until: dc_result.stdout | regex_search(pattern % new_version, multiline=True)
  delay: 20
  retries: "{{ (pod_ready_timeout | int / 20) | int }}"
  vars:
    pattern: '^.*controller "portal-%s" successfully rolled.*$'
    new_version: "{{ versions['squonk/portal'][1] }}"
  when: versions['squonk/portal'][0] != oc_squonk_portal_image_tag
