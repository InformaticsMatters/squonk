---

# Un-deploy (uninstall) the Squonk application.
#
# This consists of un-deploying the application components from the squonk
# project and the related parts of the squonk infrastructure project.

- name: Login (admin)
  shell: oc login {{ oc_master_hostname }} -u {{ oc_admin }} -p {{ oc_admin_password }}
  changed_when: False

# To un-deploy squonk, the fastest way is to
# simply delete the squonk project.

- name: Check Squonk Project
  shell: oc get projects
  register: projects_result
  changed_when: False

- name: Delete Squonk Project
  shell: oc delete project/{{ oc_project }}
  when:  projects_result.stdout | regex_search('^%s\s.*Active$' % oc_project, multiline=True)

- name: Wait for project deletion
  shell: oc get projects
  register: pj_cmd
  retries: 20
  delay: 30
  until: not pj_cmd.stdout | regex_search('^%s\s' % oc_project, multiline=True)
  changed_when: False

# Now undo the stuff in the infrastructure project...

- name: Move to Squonk Infrastructure Project
  shell: oc project {{ oc_infra_project }}
  changed_when: False

- name: Get database pod
  shell: oc get pod -o name -l deploymentConfig={{ oc_postgresql_service }}
  register: db_pod
  changed_when: False

# Remove persistent volumes

- name: Check Squonk PVs
  shell: oc get pv
  register: s_pv_result
  changed_when: False

- name: Delete Squonk PVs
  shell: oc delete pv/{{ item }}
  loop:
  - squonk-work-dir
  when: s_pv_result.stdout | regex_search('^%s\s' % item, multiline=True)

- name: Get jobs
  shell: oc get jobs
  register: job_result
  changed_when: False

- name: Delete Jobs
  shell: oc delete job/{{ item }}
  loop:
  - squonk-database-creator
  - squonk-rabbitmq-creator
  - squonk-client-creator
  when: job_result.stdout | regex_search('^%s\s' % item, multiline=True)

- name: Wait for Jobs to Terminate
  shell: oc get jobs
  register: j_cmd
  delay: 10
  retries: "{{ (pod_terminate_timeout | int / 10) | int }}"
  until: not j_cmd.stdout | regex_search('^%s\s' % item, multiline=True)
  loop:
  - squonk-database-creator
  - squonk-rabbitmq-creator
  - squonk-client-creator
  changed_when: False

- name: Get ConfigMaps
  shell: oc get configmaps
  register: cm_result
  changed_when: False

- name: Delete ConfigMaps
  shell: oc delete cm/{{ item }}
  loop:
  - squonk-database-creator
  - squonk-rabbitmq-config
  - squonk-client-creator
  when: cm_result.stdout | regex_search('^%s\s' % item, multiline=True)

# Get a keycloak token (sets the fact 'keycloak_token').
# Remember that the login user may have changed to admin.
#
#Â The actions for getting the KeyCloak token
# are located in a squonk-infra role playbook.

- import_tasks: >
    "{{ role_path }}/../../roles/squonk-infra/tasks/get-keycloak-token.yaml"
  tags:
  - keycloak-users

# We need the client ID.
# With it we can delete it.

- name: Get Portal Keycloak Client ID
  uri:
    url: "{{ keycloak_server_url }}/admin/realms/{{ keycloak_realm }}/clients?clientId={{ oc_squonk_app }}"
    headers:
      Authorization: bearer {{ keycloak_token }}
  register: client_result

- name: Delete Portal Keycloak Client
  uri:
    url: "{{ keycloak_server_url }}/admin/realms/{{ keycloak_realm }}/clients/{{ client_result.json[0].id }}"
    method: DELETE
    status_code: 204
    headers:
      Authorization: bearer {{ keycloak_token }}
  when: client_result.json

- name: Query Squonk Users
  uri:
    url: "{{ keycloak_server_url }}/admin/realms/{{ keycloak_realm }}/users?username={{ user }}"
    validate_certs: no
    headers:
      Authorization: bearer {{ keycloak_token }}
  register: squonk_users
  vars:
    user: "{{ item.split()[0] }}"
  loop: "{{ lookup('file', '../../' + users_file).split('\n') }}"
  when: users_file is defined
  changed_when: False
  tags:
  - keycloak-users

# The above 'get' is run for each expected user.
# The resultant `squonk_users' variable is a structure
# with each query represented as an element in the 'results' array.
# If the user exists it will have an 'id' property in the 'json'
# array. i.e.
#
#  "results" [{
#    "json": [{
#      "id": "blah"
#
# If the user does not exist the 'json' array is empty.
#
# To simplify further processing, we'd like a nice flat list.
# So, to collect all known users into a list it's...
#
#   squonk_users | json_query('results[*].json[*].id') | flatten
#
- name: Collect Squonk User IDs
  set_fact:
    known_user_ids: "{{ squonk_users | json_query('results[*].json[*].id') | flatten }}"
  when: users_file is defined
  tags:
  - keycloak-users

- name: Delete Existing Squonk Keycloak Users
  uri:
    url: "{{ keycloak_server_url }}/admin/realms/{{ keycloak_realm }}/users/{{ item }}"
    method: DELETE
    status_code: 204
    validate_certs: no
    headers:
      Authorization: bearer {{ keycloak_token }}
  loop: "{{ known_user_ids }}"
  when: users_file is defined
  tags:
  - keycloak-users

# What's left is the database and its tables.
# For now, deleting the database and its tables is a user action.
