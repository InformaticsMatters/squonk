---

# Un-deploy (uninstall) the Squonk application.
#
# This consists of un-deploying the application components form the squonk
# project and the related parts of the squonk infrastructure project.

- name: Login (admin)
  shell: oc login {{ oc_master_hostname }} -u admin -p {{ oc_admin_password }}
  changed_when: False

# To un-deploy squonk, the fastest way is to
# simply delete the squonk project.

- name: Check Squonk Project
  shell: oc get projects
  register: projects_result
  changed_when: False

- name: Delete Squonk Project
  shell: oc delete project/{{ oc_project }}
  when:  projects_result.stdout | regex_search('^%s\s.*Active$' % oc_project, multiline=True)

- name: Wait for project deletion
  shell: oc get projects
  register: pj_cmd
  retries: 20
  delay: 30
  until: not pj_cmd.stdout | regex_search('^%s\s' % oc_project, multiline=True)
  changed_when: False

# Now undo the stuff in the infrastructure project...

- name: Move to Squonk Infrastructure Project
  shell: oc project {{ oc_infra_project }}
  changed_when: False

- name: Get database pod
  shell: oc get pod -o name -l deploymentConfig={{ oc_postgresql_service }}
  register: db_pod
  changed_when: False

# Remove persistent volumes

- name: Check Squonk PVs
  shell: oc get pv
  register: s_pv_result
  changed_when: False

- name: Delete Squonk PVs
  shell: oc delete pv/{{ item }}
  loop:
  - squonk-work-dir
  when: s_pv_result.stdout | regex_search('^%s\s' % item, multiline=True)

- name: Get jobs
  shell: oc get jobs
  register: job_result
  changed_when: False

- name: Delete Jobs
  shell: oc delete job/{{ item }}
  loop:
  - squonk-database-creator
  - squonk-rabbitmq-creator
  - squonk-client-creator
  when: job_result.stdout | regex_search('^%s\s' % item, multiline=True)

- name: Wait for Jobs to Terminate
  shell: oc get jobs
  register: j_cmd
  delay: 10
  retries: "{{ (pod_terminate_timeout | int / 10) | int }}"
  until: not j_cmd.stdout | regex_search('^%s\s' % item, multiline=True)
  loop:
  - squonk-database-creator
  - squonk-rabbitmq-creator
  - squonk-client-creator
  changed_when: False

- name: Get ConfigMaps
  shell: oc get configmaps
  register: cm_result
  changed_when: False

- name: Delete ConfigMaps
  shell: oc delete cm/{{ item }}
  loop:
  - squonk-database-creator
  - squonk-rabbitmq-config
  - squonk-client-creator
  when: cm_result.stdout | regex_search('^%s\s' % item, multiline=True)

# Remove the client application from keycloak

# Get some secrets from the infrastructure...

- name: Move to infrastructure project
  shell: oc project {{ oc_infra_project }}
  changed_when: False

- name: Find Keycloak Service User Secret
  shell: oc get secret keycloak-secrets -o yaml | grep {{ keycloak_service_user_password_field }}
  register: secret_result
  changed_when: False

- name: Set Service User Password Fact
  set_fact:
    keycloak_service_password: "{{ secret_result.stdout | regex_replace(regexp, '\\1') | b64decode }}"
  vars:
    regexp: '^\s+{{ keycloak_service_user_password_field }}:\s+(\S+)\s*$'
  changed_when: False

# First ... collect the Keycloak token.
#
# The token (openapi-connect) lifespan is controlled from the
# Realm -> Tokens page and is typically 15 minutes by default.
#
# For individual REST API commands see
# https://www.keycloak.org/docs-api/3.4/rest-api/index.html

- name: Get Keycloak API Token
  uri:
    url: "{{ keycloak_server_url}}/realms/{{ keycloak_realm }}/protocol/openid-connect/token"
    method: POST
    body: "{{ credentials }}&grant_type=password&client_id=admin-cli"
    headers:
      Content-Type: "application/x-www-form-urlencoded"
  register: token_result
  vars:
    credentials: "username={{ keycloak_service_user }}&password={{ keycloak_service_password }}"
  changed_when: False

#- debug:
#    msg: "{{ token_result.json.access_token }}"

# We need the client ID.
# With it we can delete it.

- name: Get Portal Keycloak Client ID
  uri:
    url: "{{ keycloak_server_url }}/admin/realms/{{ keycloak_realm }}/clients?clientId={{ oc_squonk_app }}"
    headers:
      Authorization: bearer {{ token_result.json.access_token }}
  register: client_result

- name: Delete Portal Keycloak Client
  uri:
    url: "{{ keycloak_server_url }}/admin/realms/{{ keycloak_realm }}/clients/{{ client_result.json[0].id }}"
    method: DELETE
    headers:
      Authorization: bearer {{ token_result.json.access_token }}
  when: client_result.json

# What's left is the database and its tables.
# For now, deleting the database and its tables is a user action.
