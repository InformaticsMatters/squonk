---

# A pipelines validation script.
# Rules: -
#
#   - One test
#   - Don't fail
#   - Clean up (i.e. remove the job)
#
# The script can expect the following variables
# to be available (defined by the validate-pipelines playbook)...
#
# - test_user_id
# - test_user_name
# - test_user_password

# Get an access token ---------------------------------------------------------

# Once we get a token it will be available as 'je.json.access_token'
# A fact (set by validate-pipelines) is the base for the JE API 'je_rest_v1'

- name: Get Temporary JE Access Token
  uri:
    url: "{{ keycloak_server_url}}/realms/{{ keycloak_realm }}/protocol/openid-connect/token"
    body:
    - ['grant_type', 'password']
    - ['client_id', '{{ oc_jobexecutor_client }}']
    - ['username', '{{ test_user_name }}']
    - ['password', '{{ test_user_password }}']
    body_format: form-urlencoded
    method: POST
  register: je

# Run the test ----------------------------------------------------------------

- name: Display a name for the test
  debug:
    msg: "TEST: core.dataset.filter.slice"

- name: Create Job
  shell: >-
    curl -k
    -F 'options={"skip":2,"count":3}'
    -F 'input_data=@data/testfiles/Kinase_inhibs.json.gz;type=application/x-squonk-molecule-object+json;filename=input_data'
    -F 'input_metadata=@data/testfiles/Kinase_inhibs.metadata;type=application/x-squonk-dataset-metadata+json;filename=input_metadata'
    -H "Content-Type: multipart/mixed"
    -H "Authorization: bearer {{ je.json.access_token }}"
    -H "SquonkUsername: {{ test_user_name }}"
    {{ je_rest_v1 }}/jobs/core.dataset.filter.slice.v1
  args:
    warn: False
    chdir: ../../../..
  register: resp
  changed_when: false

- name: Get Job ID
  set_fact:
    job_id: "{{ resp.stdout | from_json | json_query('jobId') }}"

- name: Display Job ID
  debug:
    var: job_id

- name: Wait for RESULTS_READY
  uri:
    url: "{{ je_rest_v1 }}/jobs/{{ job_id }}/status"
    headers:
      Authorization: bearer {{ je.json.access_token }}
  register: resp
  until: resp.json.status == 'RESULTS_READY'
  retries: 12
  delay: 6

- name: Delete Job
  uri:
    url: "{{ je_rest_v1 }}/jobs/{{ job_id }}"
    method: DELETE
    headers:
      Authorization: bearer {{ je.json.access_token }}
