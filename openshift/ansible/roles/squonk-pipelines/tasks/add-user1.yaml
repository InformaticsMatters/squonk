---

# Get a keycloak token (sets the fact 'keycloak_token').
# Remember that the login user may have changed to admin.
#
# The actions for getting the KeyCloak token
# are located in a infra role playbook.

- include_tasks: >-
    {{ role_path }}/../infra/tasks/get-keycloak-token.yaml

# Check the expected user exists.
# If they do then a password is required.

- name: Set the user name fact
  set_fact:
    user1_name: user1

- name: Query existing Squonk Users
  uri:
    url: "{{ oc_keycloak_server_url }}/admin/realms/{{ oc_keycloak_realm }}/users?username={{ user1_name }}"
    headers:
      Authorization: bearer {{ keycloak_token }}
    validate_certs: "{{ oc_validate_certificates }}"
  register: user_check
  changed_when: False

# If the user exists so must a password...

- name: Assert user password is defined
  assert:
    that:
    - user1_password is defined
    - user1_password|length > 0
    fail_msg: You must define the 'user1_password' variable
  when: user_check|json_query('json')

# Otherwise assign a password (if we need to) and create the user...

- name: Create a user1 password
  set_fact:
    user1_password: "{{ oc_squonk_user_1_password }}"
  when:
  - user1_password is undefined
  - not user_check|json_query('json')

- name: Expose user password
  debug:
    msg: User {{ user1_name }} has password {{ user1_password }}
  when:
  - not user_check | json_query('json')

- name: Add user (if it does not exist)
  uri:
    url: "{{ oc_keycloak_server_url }}/admin/realms/{{ oc_keycloak_realm }}/users"
    method: POST
    body: >-
      {"username": "{{ user1_name }}",
       "enabled": "true"}
    body_format: json
    status_code: 201
    validate_certs: "{{ oc_validate_certificates }}"
    headers:
      Authorization: bearer {{ keycloak_token }}
  when:
  - not user_check | json_query('json')

- name: Query user (to get its assigned identity)
  uri:
    url: "{{ oc_keycloak_server_url }}/admin/realms/{{ oc_keycloak_realm }}/users?username={{ user1_name }}"
    validate_certs: no
    headers:
      Authorization: bearer {{ keycloak_token }}
  register: user1_resp

# We need to preserve the user ID in a fact -
# this wil be used in the removal logic handler.

- name: Set user User Identity fact
  set_fact:
    user1_id: "{{ user1_resp | json_query('json[0].id') }}"

- name: Set (Reset) Keycloak user1 User Password
  uri:
    url: "{{ oc_keycloak_server_url }}/admin/realms/{{ oc_keycloak_realm }}/users/{{ user1_id }}/reset-password"
    method: PUT
    body: >-
      {"type": "password",
       "temporary": "false",
       "value": "{{ user1_password }}"}
    body_format: json
    status_code: 204
    validate_certs: "{{ oc_validate_certificates }}"
    headers:
      Authorization: bearer {{ keycloak_token }}
  when: not user_check|json_query('json')

- name: Set a 'we created the test user' fact
  set_fact:
    validate_created_user1: true
  when: not user_check|json_query('json')
