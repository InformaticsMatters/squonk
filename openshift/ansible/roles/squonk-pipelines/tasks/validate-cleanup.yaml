---

# Deletes all JE jobs that are in the Job Queue
#Â that are: -
#
# - RESULTS_READY
# - ERROR
#
# It does this by creating the 'temporary' user1,
# inspecting the queue and deleting all jobs with
# the required status and then removing the test user.

- import_tasks: add-user1.yaml

- name: Get Temporary JE Access Token
  uri:
    url: "{{ keycloak_server_url}}/realms/{{ keycloak_realm }}/protocol/openid-connect/token"
    body:
    - ['grant_type', 'password']
    - ['client_id', '{{ oc_jobexecutor_client }}']
    - ['username', '{{ user1_name }}']
    - ['password', '{{ user1_password }}']
    body_format: form-urlencoded
    method: POST
    validate_certs: "{{ validate_certificates }}"
  register: je

- name: Display access token
  debug:
    var: je.json.access_token

- name: Set API facts
  set_fact:
    je_rest_v1: https://{{ oc_jobexecutor_host }}/jobexecutor/rest/v1
  changed_when: true
  notify:
  - Remove user 1

- name: Get job queue
  uri:
    url: "{{ je_rest_v1 }}/jobs"
    headers:
      Authorization: bearer {{ je.json.access_token }}
  register: resp

- name: Delete RESULTS_READY jobs
  uri:
    url: "{{ je_rest_v1 }}/jobs/{{ item }}"
    method: DELETE
    headers:
      Authorization: bearer {{ je.json.access_token }}
    validate_certs: "{{ validate_certificates }}"
  changed_when: true
  loop: "{{ resp | json_query('json[?status==`RESULTS_READY`].jobId') | flatten }}"

- name: Delete ERROR jobs
  uri:
    url: "{{ je_rest_v1 }}/jobs/{{ item }}"
    method: DELETE
    headers:
      Authorization: bearer {{ je.json.access_token }}
    validate_certs: "{{ validate_certificates }}"
  changed_when: true
  loop: "{{ resp | json_query('json[?status==`ERROR`].jobId') | flatten }}"
