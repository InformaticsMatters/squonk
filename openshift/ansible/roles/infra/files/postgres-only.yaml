---
kind: Template
apiVersion: v1
metadata:
  annotations:
    iconClass: icon-sso
    tags: postgres
    version: "10"
    openshift.io/display-name: PostgreSQL (Persistent) for Keycloak
    openshift.io/provider-display-name: Informatics Matters Ltd.
    description: A PostgreSQL database for use by keycloak and other applications.
    template.openshift.io/long-description: A PostgreSQL database for use by keycloak and other applications.
  name: postgresql-persistent
labels:
  template: postgresql
  app: postgresql
message: PostgreSQL has been created in your project. The username/password for
  accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}.
  This is stored in a secret named postgresql-secrets.

parameters:
  - displayName: Application Name
    description: The name for the application.
    name: APPLICATION_NAME
    value: postgresql
    required: true
  - displayName: Database Name
    description: Database name
    name: DB_DATABASE
    value: keycloak
    required: true
  - displayName: PostgreSQL Maximum number of connections
    description: The maximum number of client connections allowed. This also sets the
      maximum number of prepared transactions.
    name: POSTGRESQL_MAX_CONNECTIONS
    required: false
  - displayName: PostgreSQL Shared Buffers
    description: Configures how much memory is dedicated to PostgreSQL for caching data.
    name: POSTGRESQL_SHARED_BUFFERS
    required: false
  - displayName: Database Admin Username
    description: Database Admin user name
    name: DB_ADMIN_USERNAME
    value: postgres
    required: true
  - displayName: Database Admin Password
    description: Database postgres user password
    name: DB_ADMIN_PASSWORD
    from: "[a-zA-Z0-9]{20}"
    generate: expression
    required: true
  - displayName: Database Username
    description: Database user name
    name: DB_USERNAME
    from: user[a-zA-Z0-9]{3}
    generate: expression
    required: true
  - displayName: Database Password
    description: Database user password
    name: DB_PASSWORD
    from: "[a-zA-Z0-9]{20}"
    generate: expression
    required: true
  - displayName: ImageStream Namespace
    description: Namespace in which the ImageStreams for Red Hat Middleware images are
      installed. These ImageStreams are normally installed in the openshift namespace.
      You should only need to modify this if you've installed the ImageStreams in a
      different namespace/project.
    name: IMAGE_STREAM_NAMESPACE
    value: openshift
    required: true
  - displayName: PostgreSQL Image Stream Tag
    description: The tag to use for the "postgresql" image stream.  Typically, this
      aligns with the major.minor version of PostgreSQL.
    name: POSTGRESQL_IMAGE_STREAM_TAG
    value: '10'
    required: true

  - name: POSTGRES_SA
    value: default

  - name: PG_CPU_REQUEST
    value: 250m
  - name: PG_CPU_LIMIT
    value: 1000m
  - name: PG_MEM_REQUEST
    value: 100Mi
  - name: PG_MEM_LIMIT
    value: 500Mi


objects:

  # NOTE: As it's currently hard-coded,
  #       if you modify the 'database-service' secret
  #       you *MUST* check the rest of the project.

  - kind: Secret
    apiVersion: v1
    metadata:
      name: "postgresql-secrets"
      labels:
        application: "${APPLICATION_NAME}"
    stringData:
      database-service: db-postgresql
      database-user: "${DB_USERNAME}"
      database-password: "${DB_PASSWORD}"
      database-admin-user: "${DB_ADMIN_USERNAME}"
      database-admin-password: "${DB_ADMIN_PASSWORD}"
      database-name: "${DB_DATABASE}"

  - kind: Service
    apiVersion: v1
    spec:
      ports:
        - port: 5432
      selector:
        deploymentConfig: "db-postgresql"
    metadata:
      name: "db-postgresql"
      labels:
        application: "${APPLICATION_NAME}"
      annotations:
        description: The database server's port.

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "db-postgresql"
      labels:
        application: "${APPLICATION_NAME}"
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "db-postgresql"
            from:
              kind: ImageStreamTag
              namespace: "${IMAGE_STREAM_NAMESPACE}"
              name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
        - type: ConfigChange
      replicas: 1
      selector:
        deploymentConfig: "db-postgresql"
      template:
        metadata:
          name: "db-postgresql"
          labels:
            deploymentConfig: "db-postgresql"
            application: "${APPLICATION_NAME}"
        spec:
          # A 'preferred' (not guaranteed)
          # node selection affinity...
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  preference:
                    matchExpressions:
                      - key: purpose
                        operator: In
                        values:
                          - app
          terminationGracePeriodSeconds: 60
          serviceAccountName: ${POSTGRES_SA}
          # To access the mounted database volume
          # we set the security context's fsGroup
          # to the group that will be using the volume
          # In this case it's the postgres group in the container
          # (obtained empirically)
          securityContext:
            fsGroup: 26
          containers:
            - name: "db-postgresql"
              image: postgresql
              imagePullPolicy: Always
              ports:
                - containerPort: 5432
                  protocol: TCP
              resources:
                limits:
                  cpu: ${PG_CPU_LIMIT}
                  memory: ${PG_MEM_LIMIT}
                requests:
                  cpu: ${PG_CPU_REQUEST}
                  memory: ${PG_MEM_REQUEST}
              readinessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 60
                failureThreshold: 10
                periodSeconds: 15
                exec:
                  command:
                    - "/bin/sh"
                    - "-i"
                    - "-c"
                    - pg_isready -h 127.0.0.1 -p 5432
              livenessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 90
                failureThreshold: 3
                periodSeconds: 30
                exec:
                  command:
                    - "/bin/sh"
                    - "-i"
                    - "-c"
                    - pg_isready -h 127.0.0.1 -p 5432
              volumeMounts:
                - mountPath: "/var/lib/pgsql/data"
                  name: "postgresql-pvol"
              env:
                - name: POSTGRESQL_ADMIN_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: postgresql-secrets
                      key: database-admin-user
                - name: POSTGRESQL_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgresql-secrets
                      key: database-admin-password
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: postgresql-secrets
                      key: database-user
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgresql-secrets
                      key: database-password
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: postgresql-secrets
                      key: database-name
                - name: POSTGRESQL_MAX_CONNECTIONS
                  value: "${POSTGRESQL_MAX_CONNECTIONS}"
                - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
                  value: "${POSTGRESQL_MAX_CONNECTIONS}"
                - name: POSTGRESQL_SHARED_BUFFERS
                  value: "${POSTGRESQL_SHARED_BUFFERS}"
          volumes:
            - name: "postgresql-pvol"
              persistentVolumeClaim:
                claimName: "postgresql-claim"