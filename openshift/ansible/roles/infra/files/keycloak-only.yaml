---
kind: Template
apiVersion: v1
metadata:
  annotations:
    iconClass: icon-sso
    tags: sso,keycloak,jboss
    version: 4.8.3.Final
    description: Keyclaok SSO.
    openshift.io/display-name: Keycloak SSO
    openshift.io/provider-display-name: Informatics Matters Ltd.
  name: keycloak
labels:
  template: keycloak-only
  app: keycloak
message: Keycloak deployed.

parameters:
- displayName: Application Name
  description: The name for the application.
  name: APPLICATION_NAME
  value: sso
  required: true
- displayName: JGroups Cluster Password
  description: The password for the JGroups cluster.
  name: JGROUPS_CLUSTER_PASSWORD
  from: "[a-zA-Z0-9]{32}"
  generate: expression
  required: true
- displayName: Database JNDI Name
  description: Database JNDI name used by application to resolve the datasource, e.g.
    java:/jboss/datasources/postgresql
  name: DB_JNDI
  value: java:jboss/datasources/KeycloakDS
  required: false

- displayName: ImageStream Namespace
  description: Namespace in which the ImageStreams for Red Hat Middleware images are
    installed. These ImageStreams are normally installed in the openshift namespace.
    You should only need to modify this if you've installed the ImageStreams in a
    different namespace/project.
  name: IMAGE_STREAM_NAMESPACE
  value: openshift
  required: true

- name: SSO_SA
  value: default

- name: SSO_CPU_REQUEST
  value: 250m
- name: SSO_CPU_LIMIT
  value: 1000m
- name: SSO_MEM_REQUEST
  value: 200Mi
- name: SSO_MEM_LIMIT
  value: 650Mi

#- name: SSO_JAVA_OPTS
#  value: "-server -Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true"
#  description: >-
#    A value used for the Java application's JAVA_TOOL_OPTIONS
#    environment variable. The values are used by the container's
#    underlying JVM. Use of -Xmx for example is a convenient
#    way of setting the maximum JVM heap and should lie somewhere
#    between the MEM_REQUEST and MEM_LIMIT (certainly less than the limit
#    to allow for some 'headroom' for allocations other than from the JVM).

objects:

- kind: Service
  apiVersion: v1
  spec:
    ports:
    - name: https
      port: 8443
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
  metadata:
    name: secure-${APPLICATION_NAME}
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: The web server's https port.
      service.alpha.openshift.io/serving-cert-secret-name: sso-x509-https-secret
      service.alpha.openshift.io/dependencies: '[{"name": "db-postgresql", "kind": "Service"}]'

- kind: Service
  apiVersion: v1
  spec:
    clusterIP: None
    ports:
    - name: ping
      port: 8888
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
  metadata:
    name: "${APPLICATION_NAME}-ping"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: 'true'
      service.alpha.openshift.io/serving-cert-secret-name: sso-x509-jgroups-secret
      description: The JGroups ping port for clustering.

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_STREAM_NAMESPACE}"
          name: keycloak:4.8.3.Final
    - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
    template:
      metadata:
        name: "${APPLICATION_NAME}"
        labels:
          deploymentConfig: "${APPLICATION_NAME}"
          application: "${APPLICATION_NAME}"
      spec:
        # A 'preferred' (not guaranteed)
        #Â node selection affinity...
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                - key: purpose
                  operator: In
                  values:
                  - app
        terminationGracePeriodSeconds: 75
        serviceAccountName: ${SSO_SA}
        containers:
        - name: "${APPLICATION_NAME}"
          image: "${APPLICATION_NAME}"
          imagePullPolicy: Always
          resources:
            limits:
              cpu: ${SSO_CPU_LIMIT}
              memory: ${SSO_MEM_LIMIT}
            requests:
              cpu: ${SSO_CPU_REQUEST}
              memory: ${SSO_MEM_REQUEST}
          volumeMounts:
          - name: sso-x509-https-volume
            mountPath: "/etc/x509/https"
            readOnly: true
          - name: sso-x509-jgroups-volume
            mountPath: "/etc/x509/jgroups"
            readOnly: true
          livenessProbe:
            timeoutSeconds: 4
            initialDelaySeconds: 120
            failureThreshold: 10
            periodSeconds: 30
            httpGet:
              path: /auth/realms/master
              port: 8080
              scheme: HTTP
          readinessProbe:
            failureThreshold: 20
            initialDelaySeconds: 90
            periodSeconds: 30
            httpGet:
              path: /auth/realms/master
              port: 8080
              scheme: HTTP
          ports:
          - name: jolokia
            containerPort: 8778
            protocol: TCP
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: https
            containerPort: 8443
            protocol: TCP
          - name: ping
            containerPort: 8888
            protocol: TCP
          env:
          - name: DB_VENDOR
            value: POSTGRES
          - name: DB_ADDR
            value: db-postgresql
          - name: DB_SERVICE_PREFIX_MAPPING
            value: "db-postgresql=DB"
          - name: DB_JNDI
            value: "${DB_JNDI}"
          - name: DB_SCHEMA
            value: public
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: postgresql-secrets
                key: database-user
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgresql-secrets
                key: database-password
          - name: DB_DATABASE
            valueFrom:
              secretKeyRef:
                name: postgresql-secrets
                key: database-name
          - name: TX_DATABASE_PREFIX_MAPPING
            value: "db-postgresql=DB"
          - name: DB_MIN_POOL_SIZE
            value: "${DB_MIN_POOL_SIZE}"
          - name: DB_MAX_POOL_SIZE
            value: "${DB_MAX_POOL_SIZE}"
          - name: DB_TX_ISOLATION
            value: "${DB_TX_ISOLATION}"
          - name: JGROUPS_PING_PROTOCOL
            value: openshift.DNS_PING
          - name: OPENSHIFT_DNS_PING_SERVICE_NAME
            value: "${APPLICATION_NAME}-ping"
          - name: OPENSHIFT_DNS_PING_SERVICE_PORT
            value: '8888'
          - name: X509_CA_BUNDLE
            value: "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
          - name: JGROUPS_CLUSTER_PASSWORD
            value: "${JGROUPS_CLUSTER_PASSWORD}"
          - name: KEYCLOAK_USER
            valueFrom:
              secretKeyRef:
                name: keycloak-secrets
                key: sso-admin-user
          - name: KEYCLOAK_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-secrets
                key: sso-admin-password
          #- name: JAVA_OPTS
          #  value: "${SSO_JAVA_OPTS}"
        volumes:
        - name: sso-x509-https-volume
          secret:
            secretName: sso-x509-https-secret
        - name: sso-x509-jgroups-volume
          secret:
            secretName: sso-x509-jgroups-secret
