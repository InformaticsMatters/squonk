---

- name: Move to Infrastructure Project
  command: oc project {{ oc_infra_project }}
  changed_when: False

- name: Login (admin)
  command: >
    oc login {{ oc_master_url }} -u {{ oc_admin }} -p {{ oc_admin_password }}
    --insecure-skip-tls-verify=true
  changed_when: False

# Check/Create PVs

- name: Check Infrastructure PVs
  shell: oc get pv
  register: i_pv_result
  changed_when: False

- name: Create Backup PVs (nfs)
  shell: >
    oc process
    -p INFRA_NAMESPACE={{ oc_infra_project }}
    -p NFS_SERVER={{ oc_nfs_server }}
    -p NFS_PATH={{ oc_infra_backup_nfs_path }}
    -p NFS_VOLUME={{ oc_infra_backup_nfs_pv_volume }}
    -p BACKUP_VOLUME_SIZE={{ oc_infra_backup_volume_size }}
    -f {{ role_path }}/files/infra-backup-pv-nfs.yaml
    | oc create -f -
  when: not i_pv_result.stdout | regex_search('^pv-backup\s', multiline=True)

# Wait for PVs to become "Available"...

- name: Wait for PVs to become Available (nfs)
  shell: oc get pv/pv-backup | grep Available
  retries: 6
  delay: 5
  register: result
  until: result.rc == 0
  when: not i_pv_result.stdout | regex_search('^pv-backup\s', multiline=True)

# Deal with "Released" volumes.
# Those PVs that are "Released"
# must be "Available" to accept new binds...

- name: Check Released volumes (nfs)
  shell: oc get pv | grep Released | grep {{ oc_infra_project }}/ | cut -f 1 -d " "
  register: released_vols
  when: oc_recycle_released_pvs|bool
  changed_when: False

- name: Recover Released volumes (nfs)
  shell: >
    oc patch pv/{{ item }} --type json
    -p $'- op: remove\n  path: /spec/claimRef'
  with_items:
  - "{{ released_vols.stdout_lines }}"
  when: oc_recycle_released_pvs|bool

# Check/Create PVCs

- name: Check Backup PVCs (nfs)
  command: oc get pvc
  register: i_pvc_result
  changed_when: False

- name: Create Infrastructure PVCs (nfs)
  shell: >
    oc process
    -p INFRA_NAMESPACE={{ oc_infra_project }}
    -p BACKUP_VOLUME_SIZE={{ oc_infra_backup_volume_size }}
    -f {{ role_path }}/files/infra-backup-pvc-nfs.yaml
    | oc create -f -
  when: not i_pvc_result.stdout | regex_search('^infra-backup-claim\s', multiline=True)

# Wait for PVCs to become "Bound"...

- name: Wait for PVCs to become Bound (nfs)
  shell: oc get pvc/backup-claim | grep Bound
  retries: 6
  delay: 5
  register: result
  until: result.rc == 0
  when: not i_pvc_result.stdout | regex_search('^infra-backup-claim\s', multiline=True)
