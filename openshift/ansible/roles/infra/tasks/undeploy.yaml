---

# Un-deploy (uninstall) the Infrastructure.
#
# USE with EXTREME caution.

- name: Delete Infrastructure?
  pause:
    prompt: |-
      Delete the Infrastructure from {{ oc_master_url }}?
      Press return to continue.
      Press Ctrl+c and then "a" if you've changed your mind

- name: Login (admin)
  command: oc login {{ oc_master_url }} -u {{ oc_admin }} -p {{ oc_admin_password }}
  changed_when: False

# To un-deploy the infrastructure, the fastest way is to
# simply delete the project.

- name: Check Infra Project
  command: oc get projects
  register: projects_result
  changed_when: False

- name: Delete Infra Project
  command: oc delete project/{{ oc_infra_project }}
  when: projects_result.stdout|regex_search('^%s\s.*Active$' % oc_infra_project, multiline=True)

- name: Wait for Infra project deletion
  command: oc get projects
  register: pj_cmd
  retries: 20
  delay: 30
  until: not pj_cmd.stdout|regex_search('^%s\s' % oc_infra_project, multiline=True)
  changed_when: False

# Delete SCC

- name: Check Infra SCC
  command: oc get scc
  register: scc_result
  changed_when: False

- name: Delete Infra SCC
  shell: oc delete scc/scc-infra
  when: scc_result.stdout|regex_search('^scc-infra', multiline=True)

# Remove persistent volumes

- name: Check Infra PVs (nfs)
  command: oc get pv
  register: s_pv_result
  changed_when: False
  when: oc_infra_volume_type == 'nfs'

- name: Delete Infra PVs (nfs)
  command: oc delete pv/{{ item }}
  loop:
  - pv-postgresql
  - pv-rabbitmq
  when:
  - oc_infra_volume_type == 'nfs'
  - s_pv_result.stdout|regex_search('^%s\s' % item, multiline=True)

# Finally - display a warning about non-dynamic volume data content...

- name: Display non-dynamic volume data warning
  vars:
    msg: |
      -------
      CAUTION
      -------
      Persistent volume content may not have been removed.
      This is especially true if you are using non-dynamic volumes like NFS.
      If you want to completely remove infrastructure data
      please check and erase any non-dynamic volume content.
  debug:
    msg: "{{ msg.split('\n') }}"
