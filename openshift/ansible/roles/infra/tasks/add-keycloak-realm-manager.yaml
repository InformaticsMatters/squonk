---

# It is assumed the Keycloak 'Realm' ({{ oc_keycloak_realm }}) exists.
#
# This play creates 'manager secrets' for subsequent inspection in OpenShift.
# The password is generated by Ansible rather than by OpenShift as it's needed
# elsewhere in this playbook.
#
# With the secrets created the play then creates the manager user in Keycloak
# and then adds the 'realm-admin' role (from the built-in 'realm-management'
# client) to the manager account.

# Deploy Keycloak 'manager' secrets.
# Secrets used by applications,
# kept here because they are not directly related to the Keycloak installation.

- name: Login (user)
  shell: oc login {{ oc_master_url }} -u {{ oc_user }} -p {{ oc_user_password }}
  changed_when: False

- name: Move to Infrastructure Project
  shell: oc project {{ oc_infra_project }}
  changed_when: False

- name: Check Secrets
  shell: oc get secrets
  register: secret_result
  changed_when: False

- name: Set manager username
  set_fact:
    manager_username: manager

- name: Generate manager password
  set_fact:
    manager_password: "{{ lookup('password', '/dev/null chars=ascii_letters') }}"
  when: '"manager-secrets" not in secret_result.stdout'

- name: Deploy Secrets
  shell: >
    oc process -f {{ role_path }}/files/keycloak-manager-secrets.yaml
    -p MANAGER_PASSWORD={{ manager_password }}
    | oc create -f -
  when: manager_password is defined

# Now adjust the Keycloak installation...

# The actions for getting the KeyCloak token
# are located in an infra role playbook.
#
# By default it gets a token from the 'manager' account
# but we don't have a manager yet so get a toke from the admin account...

- include_tasks: get-keycloak-token.yaml
  vars:
    oc_keycloak_realm: master
    oc_keycloak_api_secrets: keycloak-secrets
    oc_keycloak_api_user: admin
    oc_keycloak_api_user_password_field: sso-admin-password
  tags:
  - keycloak-users

# The realm is assumed to exist,
# it's created by a prior play.

# A convenient variable representing the constant part
# for all the URI requests we make...

- name: Set API endpoint
  set_fact:
    keycloak_endpoint: "{{ oc_keycloak_server_url }}/admin/realms/{{ oc_keycloak_realm }}"

# Check and create the manager (in the oc_keycloak_realm)...

- name: Query manager account
  uri:
    url: "{{ keycloak_endpoint }}/users?username={{ manager_username }}"
    validate_certs: no
    headers:
      Authorization: bearer {{ keycloak_token }}
  register: manager_user
  changed_when: False
  tags:
  - keycloak-users

- name: Get manager user ID
  set_fact:
    manager_user_id: "{{ manager_user|json_query('json[0].id') }}"
  tags:
  - keycloak-users

- include_tasks: add-keycloak-realm-manager-user.yaml
  when:
  - manager_user_id|length == 0
  - manager_password is defined

# Create the manager account if it does not exist...

- name: Assert user ID
  assert:
    that:
    - manager_user_id is defined
    - manager_user_id|length > 0

# Now get the 'realm-management' client ID
# so we can lookup the available roles it provides...
# We need the client ID to make calls, its name if of little use
# when  used in other calls.

- name: Get realm-management client ID
  uri:
    url: "{{ keycloak_endpoint }}/clients?clientId=realm-management"
    validate_certs: no
    headers:
      Authorization: bearer {{ keycloak_token }}
  register: rm_client_id
  tags:
  - keycloak-users

- name: Set realm-management client ID
  set_fact:
    client_id: "{{ rm_client_id.json[0].id }}"

# Now get the Roles available from the 'real-management' client...
# We're looking for the 'realm-admin' role so we can get its ID...

- name: Get available realm-management roles
  uri:
    url: "{{ keycloak_endpoint }}/{{ method }}"
    validate_certs: no
    headers:
      Authorization: bearer {{ keycloak_token }}
  register: rm_roles
  tags:
  - keycloak-users
  vars:
    method: users/{{ manager_user_id }}/role-mappings/clients/{{ client_id }}/available

# 'realm-admin' might not be in the 'available' list.
# It isn't if the role's already assigned,
# so we need to protect ourselves from not finding it...

- name: Search for realm-admin role ID
  set_fact:
    realm_admin_id_list: "{{ rm_roles|json_query(query) }}"
  vars:
    query: "json[?name=='realm-admin'].id"
  tags:
  - keycloak-users

- name: Get realm-admin role ID
  set_fact:
    realm_admin_id: "{{ realm_admin_id_list[0] }}"
  when:
  - realm_admin_id_list is defined
  - realm_admin_id_list|length > 0
  tags:
  - keycloak-users

# Now, finally, add the role to the manager account...

- name: Assign realm-management/realm-admin role to user
  uri:
    url: "{{ keycloak_endpoint }}/{{ method }}"
    method: POST
    body: >-
      [{"clientRole": "true",
        "composite": "true",
        "id": "{{ realm_admin_id }}",
        "name": "realm-admin"}]
    body_format: json
    status_code: 204
    validate_certs: no
    headers:
      Authorization: bearer {{ keycloak_token }}
  vars:
    method: users/{{ manager_user_id }}/role-mappings/clients/{{ client_id }}
  when:
  - realm_admin_id is defined
  tags:
  - keycloak-users
