---

# Deployment project
oc_cc_project: squonk-chemcentral
oc_cc_project_display_name: Squonk ChemCentral Search

# The ChemCentral Service Account
oc_cc_sa: chemcentral

# Misc variables...
oc_cc_pv_name: pv-chemcentral-postgresql
oc_cc_pvc_name: chemcentral-postgresql-claim
oc_cc_data_loader_pv_name: pv-chemcentral-loader
oc_cc_data_loader_pvc_name: chemcentral-data-loader-pvc

# Parameters for the ChemCentral Loader.
#
# The class controls the flavour of loader being launched.
#
# Refer to Squonk's
# rdkit-databases/src/main/groovy/org/squonk/rdkit/db/loaders/
# for an up-to-date list.
#
# - EMoleculesBBSmilesLoader
# - EnamineRealDsiLoader
# - MolportSmilesLoader
oc_cc_loader_class: MolportSmilesLoader
# The file (used by single-file loaders)
oc_cc_loader_file: Undefined
# The loader base directory and file pattern
# (for Molport-like multi-file loaders).
#
# The pattern is a reg-ex,
# typically something like: iis_smiles\\-.*\\.txt\\.gz
oc_cc_loader_dir: molport-2018-08
oc_cc_loader_pattern: iis_smiles\\-.*\\.txt\\.gz
# The number of molecules to load (0 == all)
oc_cc_loader_limit: 0
# The identity of the loader (any string value).
# This is used to uniquely identify loader Jobs
# so Jobs with the same marker are prevented
# from running at the same time.
oc_cc_loader_marker: a

# Here PVs used by the application (the squonk-work-dir for example)
# are returned to an 'Available' state if they're currently
# in a 'Released' state. Note: it is the user's responsibility
# to protect themselves for data loss here. This will inspect the
# "state" of all PVs in the squonk *and* infrastructure projects.
oc_recycle_released_pvs: yes

# What volume type are we using? One of: -
#
# - dynamic
# - nfs
# - none
#
#   When using `dynamic' remember to set
#   the accompanying 'volume_storage_class' variable (see below)
#
#   When using 'nfs' you must have provisioned the NFS volumes
#
#   When set to 'none' the user is expected to have provisioned
#   the persistent volumes and claims suitable for the project.
oc_cc_infra_volume_type: dynamic

# Memory/CPU requests
oc_cc_postgresql_cpu_request: 100m
oc_cc_postgresql_mem_request: 100Mi
oc_cc_search_cpu_request: 250m
oc_cc_search_mem_request: 1200Mi
oc_cc_loader_cpu_request: 250m
oc_cc_loader_mem_request: 100Mi

# The volume size for the PostgreSQL ChemCentral database
# and the loader volume size.
oc_cc_postgresql_volume_size: 350Gi
oc_cc_loader_volume_size: 1Gi

# When using dynamic volumes the storage
# class needs to be defined...
oc_cc_volume_storage_class: glusterfs-storage
