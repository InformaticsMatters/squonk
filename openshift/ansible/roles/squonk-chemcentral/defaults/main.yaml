---

# Misc variables...
pv_name: pv-chemcentral-postgresql
pvc_name: chemcentral-postgresql-claim
data_loader_pv_name: pv-chemcentral-loader
data_loader_pvc_name: chemcentral-data-loader-pvc

# Parameters for the ChemCentral Loader.
#
# Supported loader classes in this role are: -
#
# - EMoleculesBBSmilesLoader
# - EnamineRealDsiLoader
# - MolportSmilesLoader
#
# The class controls the flavour of loader being launched.
loader_class: MolportSmilesLoader
# The file (used by single-file loaders)
loader_file: Undefined
# The loader base directory and file pattern
# (for Molport-like multi-file loaders)
loader_dir: molport-2018-08
loader_pattern: iis_smiles-*.txt.gz
# The number of molecules to load (0 == all)
loader_limit: 0

# The ChemCentral Service Account
# in the Infrastructure project
oc_cc_infra_sa: chemcentral-postgres

# Here PVs used by the application (the squonk-work-dir for example)
# are returned to an 'Available' state if they're currently
# in a 'Released' state. Note: it is the user's responsibility
# to protect themselves for data loss here. This will inspect the
# "state" of all PVs in the squonk *and* infrastructure projects.
recycle_released_pvs: yes

# What volume type are we using? One of: -
#
# - dynamic
# - nfs
# - none
#
#   When using `dynamic' remember to set
#   the accompanying 'volume_storage_class' variable (see below)
#
#   When using 'nfs' you must have provisioned the NFS volumes
#
#   When set to 'none' the user is expected to have provisioned
#   the persistent volumes and claims suitable for the project.
oc_cc_infra_volume_type: "{{ ansible_env.OC_INFRA_VOLUME_TYPE }}"

# When using dynamic volumes the storage
# class needs to be defined...
volume_storage_class: cloud-block-volume
