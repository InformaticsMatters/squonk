---

# Deploys PostgreSQL with the RDKit cartridge plus the chemical search service.
#
# oc process -f chemcentral-db.yaml | oc create -f -
# oc delete all,cm,pvc,secrets --selector template=chemcentral-db

kind: Template
apiVersion: v1
metadata:
  name: chemcentral-db
  annotations:
    description: Chemcentral chemical search
    tags: squonk,chemcentral
labels:
  template: chemcentral-db
  app: chemcentral

parameters:

- name: DB_NAMESPACE
  description: Namespace for the chemcentral database
  value: squonk-infra

- name: APP_NAMESPACE
  description: Namespace for the chemcentral search service
  value: squonk

- name: APP_SA
  description: Service Account for the chemcentral search service
  value: chemcentral-postgres

- name: POSTGRES_IMAGE_TAG
  description: The version tag for the RDKIT container version
  value: Release_2017_09_2

- name: POSTGRES_SERVICE
  displayName: PostgreSQL RDKit cartridge service name
  value: db-chemcentral

- name: POSTGRES_ADMIN_USER
  displayName: Database admin username
  value: postgres

- name: POSTGRES_ADMIN_PASSWORD
  displayName: Database Admin Password
  from: "[a-zA-Z0-9]{8}"
  generate: expression
  required: true

- name: POSTGRES_CHEMCENTRAL_PASSWORD
  displayName: Database User Password
  from: "[a-zA-Z0-9]{8}"
  generate: expression
  required: true

- name: POSTGRES_CPU_REQUEST
  value: 100m
- name: POSTGRES_CPU_LIMIT
  value: 1000m
- name: POSTGRES_MEM_REQUEST
  value: 100Mi
- name: POSTGRES_MEM_LIMIT
  value: 500Mi

objects:

# secret in the infra namespace with the postgres admin credentials
- kind: Secret
  apiVersion: v1
  metadata:
    name: chemcentral-database-credentials
    namespace: ${DB_NAMESPACE}
  stringData:
    host: ${POSTGRES_SERVICE}.${DB_NAMESPACE}.svc
    database-admin-user: postgres
    database-admin-password: "${POSTGRES_ADMIN_PASSWORD}"

# secret in the squonk namespace with the chemcentral user credentials
- kind: Secret
  apiVersion: v1
  metadata:
    name: chemcentral-database-credentials
    namespace: ${APP_NAMESPACE}
  stringData:
    host: ${POSTGRES_SERVICE}.${DB_NAMESPACE}.svc
    database-name: chemcentral
    database-user: chemcentral
    database-password: "${POSTGRES_CHEMCENTRAL_PASSWORD}"

# -----------------------------------------------------------------------------
# Postgres Service
# -----------------------------------------------------------------------------

- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: chemcentral-init-map
    namespace: ${DB_NAMESPACE}
  data:
    init-postgres-db.sh: |
      #!/bin/bash

      export PGUSER=${POSTGRESQL_ADMIN_USER:-postgres}
      export PGPASSWORD=${POSTGRESQL_ADMIN_PASSWORD}

      echo "Setting up db as user ${PGUSER}"

      echo "Creating chemcentral user"
      psql --command "CREATE USER chemcentral"
      psql --command "ALTER USER chemcentral WITH PASSWORD '${POSTGRES_CHEMCENTRAL_PASSWORD}'"
      echo "Chemcentral user created with password ${POSTGRES_CHEMCENTRAL_PASSWORD}"

      echo "Creating chemcentral database"
      createdb -O chemcentral chemcentral
      echo "Chemcentral database created"

      echo "Deploying RDKit cartridge to chemcentral"
      psql --command 'create extension rdkit' chemcentral
      echo "RDKit cartridge deployed to chemcentral"

      echo "Creating vendordbs schema in chemcentral"
      psql -d chemcentral --command "CREATE SCHEMA vendordbs AUTHORIZATION chemcentral;"
      echo "vendordbs schema created"

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${POSTGRES_SERVICE}
    namespace: ${DB_NAMESPACE}
  spec:
    replicas: 1
    selector:
      name: ${POSTGRES_SERVICE}
    template:
      metadata:
        labels:
          name: ${POSTGRES_SERVICE}
      spec:
        # A 'preferred' (not guaranteed)
        #Â node selection affinity...
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                - key: purpose
                  operator: In
                  values:
                  - app

        serviceAccountName: ${APP_SA}

        containers:
        - image: informaticsmatters/rdkit_cartridge:${POSTGRES_IMAGE_TAG}
          name: ${POSTGRES_SERVICE}
          env:
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PASSWORD
            value: "${POSTGRES_ADMIN_PASSWORD}"
          - name: POSTGRES_CHEMCENTRAL_PASSWORD
            value: "${POSTGRES_CHEMCENTRAL_PASSWORD}"
          ports:
          - containerPort: 5432
          readinessProbe:
            exec:
              command: ['sh', '-c',
                'select=$(echo SELECT 1 | psql --host 127.0.0.1 --username postgres --quiet --no-align --tuples-only) && [ $select = 1 ]']
            initialDelaySeconds: 15
            timeoutSeconds: 5
          livenessProbe:
            # This probe results in PG issuing 'incomplete startup packet'
            # messages to the log. They're the result of probe
            # making a TCP connection but sending no traffic.
            initialDelaySeconds: 60
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
            # Default period is 10 seconds
            periodSeconds: 20
#          resources:
#            limits:
#              cpu: ${POSTGRES_CPU_LIMIT}
#              memory: ${POSTGRES_MEM_LIMIT}
#            requests:
#              cpu: ${POSTGRES_CPU_REQUEST}
#              memory: ${POSTGRES_MEM_REQUEST}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgresql-data
          - mountPath: /docker-entrypoint-initdb.d
            name: init-config
        volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: chemcentral-postgresql-claim
        - name: init-config
          configMap:
            name: chemcentral-init-map

- kind: Service
  apiVersion: v1
  metadata:
    name: ${POSTGRES_SERVICE}
    namespace: ${DB_NAMESPACE}
  spec:
    ports:
    - name: ${POSTGRES_SERVICE}
      port: 5432
      targetPort: 5432
    selector:
      name: ${POSTGRES_SERVICE}
