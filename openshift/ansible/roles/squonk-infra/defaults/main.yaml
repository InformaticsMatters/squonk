---

# Pickup environment variables that are set
# using `source setenv.sh`...

keycloak_realm: "{{ ansible_env.KEYCLOAK_REALM }}"

oc_project: "{{ ansible_env.OC_PROJECT }}"
oc_infra_project: "{{ ansible_env.OC_INFRA_PROJECT }}"
oc_infra_sa: "{{ ansible_env.OC_INFRA_SA }}"
oc_master_hostname: "{{ ansible_env.OC_MASTER_HOSTNAME }}"
oc_routes_basename: "{{ ansible_env.OC_ROUTES_BASENAME }}"
oc_admin_password: "{{ ansible_env.OC_ADMIN_PASSWORD }}"

# What volume type are we using? One of: -
#
# - dynamic
# - nfs
# - none
#
#   When using `dynamic' remember to set
#   the accompanying 'volume_storage_class' variable (see below)
#
#   When using 'nfs' you must have provisioned the NFS volumes
#
#   When set to 'none' the user is expected to have provisioned
#   the persistent volumes and claims suitable for the project.
oc_infra_volume_type: "{{ ansible_env.OC_INFRA_VOLUME_TYPE }}"

# When using dynamic volumes the storage
# class needs to be defined...
oc_infra_volume_storage_class: "{{ ansible_env.OC_INFRA_VOLUME_STORAGE_CLASS }}"

# Other variables

postgresql_shared_buffer_size: 1GB
postgresql_volume_size: 125Gi
rabbitmq_volume_size: 1Gi

# If set each deployment of Pods (infrastructure and squonk)
# will be followed by a monitoring step that waits for the
# expected Pods to initialise before moving on to the next step.
wait_for_pods: yes

# Here PVs used by the application (the squonk-work-dir for example)
# are returned to an Available state if they're currently
# in a Released state. Note: it is the user's responsibility
# to protect themselves for data loss here. This will inspect the
# "state" of all PVs in the squonk *and* infrastructure projects.
recycle_released_pvs: yes

# What volume type are we using? One of: -
#
# - dynamic
# - nfs
# - none
#
#   When using `dynamic' remember to set
#   the accompanying 'volume_storage_class' variable (see below)
#
#   When using 'nfs' you must have provisioned the NFS volumes
#
#   When set to 'none' the user is expected to have provisioned
#   the persistent volumes and claims suitable for the project.
volume_type: none

# When using dynamic volumes the storage
# class needs to be defined...
volume_storage_class: cloud-block-volume

# Our root Squonk template directory
# (relative to the role_path directory)
t_dir: ../../../templates
