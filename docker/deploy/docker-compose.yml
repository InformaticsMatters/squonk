# You must set various environment variables before running anything.
# These variables define things like usernames and passwords that will be used and allows
# these to be easily set for different environments.
# The easiest way is to create a shell script containing the definitions and 'source' it.
# A template file is present called docker/deploy/setenv-default.sh
# Copy this to docker/deploy/setenv.sh and edit it accordingly.
# Then 'source' it: source setenv.sh
# DO NOT edit setenv-default.sh directly with confidential information like passwords as it's stored in Git.
# Instead copy it to setenv.sh, which is .gitignore'd.

version: '2.1'

networks:
    squonk_front:
        driver: bridge
    squonk_back:
        driver: bridge
    squonk_isolated:
        driver: bridge

services:


    ################# Rabbit MQ container #############################################
    #
    # initialize:
    # docker exec deploy_rabbitmq_1 bash init.sh
    # admin console available on http://${PUBLIC_HOST}:15672/
    #
    rabbitmq:
        image: rabbitmq:3-management
        restart: on-failure
        ports:
        - "15672:15672"
        volumes:
        - ./images/rabbitmq/docker-healthcheck.sh:/usr/local/bin/docker-healthcheck.sh:ro,Z
        - ../rabbitmq/init.sh:/usr/local/etc/init.sh:ro,Z
        - ../rabbitmq/update-credentials.sh:/usr/local/etc/update-credentials.sh:ro,Z
        - ../rabbitmq/clean.sh:/usr/local/etc/clean.sh:ro,Z
        environment:
            RABBITMQ_ERLANG_COOKIE:
            RABBITMQ_DEFAULT_USER: admin
            RABBITMQ_DEFAULT_PASS: $RABBITMQ_DEFAULT_PASSWORD
            RABBITMQ_SQUONK_PASSWORD:
        networks:
        - squonk_back
        # healthcheck borrowed from here: https://github.com/docker-library/healthcheck/tree/master/rabbitmq
        healthcheck:
            test: docker-healthcheck.sh
            interval: 10s
            timeout: 4s
            retries: 5

    ################# PostgreSQL container ############################################
    # based on PostgreSQL 9.5 with RDKit cartridge support
    #
    postgres:
        image: informaticsmatters/rdkit_cartridge:Release_2017_09_2
        volumes:
        - ./images/postgres/init-postgres-db.sh:/docker-entrypoint-initdb.d/init-postgres-db.sh:ro,Z
        - ./images/postgres/docker-healthcheck.sh:/usr/local/bin/docker-healthcheck.sh:ro,Z
        - ./data/pgdata:/var/lib/postgresql/data:Z
        environment:
            POSTGRES_PASSWORD:
            POSTGRES_KEYCLOAK_PASSWORD:
            POSTGRES_SQUONK_PASSWORD:
        ports:
        - "5432:5432"
        networks:
        - squonk_back
        # healthcheck borrowed from here: https://github.com/docker-library/healthcheck/tree/master/postgres
        healthcheck:
            test: docker-healthcheck.sh
            interval: 10s
            timeout: 2s
            retries: 5

    flyway:
        image: squonk/flyway:${TAG}
        environment:
            POSTGRES_PASSWORD:
        networks:
        - squonk_back
        depends_on:
            postgres:
                condition: service_healthy

    ################# stage1 container ############################################
    # waits till postgres and rabbitmq are healthy and then terminates
    # allows to ensure that both those services are running
    # Also connects to squonk_isolated network to ensure that that network is created
    #
    stage1:
        image: busybox
        networks:
         - squonk_isolated
         - squonk_back
        depends_on:
            postgres:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy

    ################# chem services container #########################################
    # available on
    # http://${PUBLIC_HOST}:8092/chem-services-rdkit-basic/rest/v1/calculators
    # http://${PUBLIC_HOST}:8092/chem-services-cdk-basic/rest/v1/calculators
    # http://${PUBLIC_HOST}:8092/chem-services-chemaxon-basic/rest/v1/calculators
    # http://${PUBLIC_HOST}:8092/chem-services-chemaxon-basic/rest/v1/descriptors
    #
    # Test using something like this:
    # curl -X POST -T mols.json "http://${PUBLIC_HOST}:8092/chem-services-cdk-basic/rest/v1/calculators/logp"
    #
    # Test SDF conversion with something like this:
    # curl -X POST --data-binary @/tmp/lipinski.data.gz http://chemservices:8080/chem-services-cdk-basic/rest/v1/converters/dataset_to_sdf \
    #   -H 'Content-Type: application/x-squonk-dataset-molecule+json' -H 'Content-Encoding: gzip' -H 'Accept: chemical/x-mdl-sdfile'
    #
    # Example of reading notebook variable and sending for conversion:
    # curl http://coreservices:8080/coreservices/rest/v1/notebooks/15/v/15/1/output/s/default |\
    #   curl -X POST --data-binary @- http://chemservices:8080/chem-services-cdk-basic/rest/v1/converters/dataset_to_sdf\
    #   -H 'Content-Type: application/x-squonk-dataset-molecule+json' -H 'Content-Encoding: gzip' -H 'Accept: chemical/x-mdl-sdfile'
    #
    chemservices:
        image: squonk/chemservices-basic:${TAG}
        restart: on-failure
        volumes:
        - ./images/chemservices/license.cxl:/usr/local/tomcat/license.cxl:ro,z
        environment:
            CHEMAXON_LICENSE_URL: /usr/local/tomcat/license.cxl
            RABBITMQ_SQUONK_PASSWORD:
        networks:
        - squonk_back
        depends_on:
            coreservices:
                condition: service_healthy
        healthcheck:
            test: curl --fail http://localhost:8080/chem-services-cdk-basic/rest/ping || exit 1
            interval: 20s
            timeout: 5s
            retries: 10

   ################# chemchentral-search container #########################################
    # available on
    # http://${PUBLIC_HOST}:8093/chemcentral-search/rest/v1/db
    # http://${PUBLIC_HOST}:8093/chemcentral-search/rest/v1/db/search?table=emolecules_order_bb&limit=5&mode=sss&q=%5B%236%5D-1-%5B%236%5D-%5B%237%5D-%5B%236%5D-%5B%236%5D-%5B%237%5D-1
    # http://${PUBLIC_HOST}:8093/chemcentral-search/rest/v1/db/search?table=emolecules_order_bb&limit=5&mode=sim&q=CN1C%3DNC2%3DC1C(%3DO)N(C)C(%3DO)N2C"
    #
    chemcentral-search:
        image: squonk/chemcentral-search:${TAG}
        networks:
        - squonk_back
        environment:
            CHEMCENTRAL_HOST:
            CHEMCENTRAL_PORT:
            CHEMCENTRAL_DB:
            CHEMCENTRAL_USER:
            CHEMCENTRAL_PASSWORD:
            RABBITMQ_SQUONK_PASSWORD:
        depends_on:
            postgres:
                condition: service_healthy
            coreservices:
                condition: service_healthy
        healthcheck:
            test: curl --fail http://localhost:8080/chemcentral-search/rest/ping || exit 1
            interval: 10s
            timeout: 5s
            retries: 10

    ################# core-services-server container ###################################
    # available on:
    # http://${PUBLIC_HOST}/coreservices/rest/ping
    # http://${PUBLIC_HOST}/coreservices/rest/v1/services/configs
    # http://${PUBLIC_HOST}/coreservices/rest/v1/services/descriptors
    # http://${PUBLIC_HOST}/coreservices/rest/v1/jobs
    #
    coreservices:
        image: squonk/coreservices:${TAG}
        restart: on-failure
        depends_on:
            postgres:
                condition: service_healthy
            rabbitmq:
                condition: service_started
        environment:
            RABBITMQ_SQUONK_PASSWORD:
            POSTGRES_SQUONK_PASSWORD:
            SQUONK_DOCKER_SERVICES_DIR: "/var/local/squonk-docker-services"
            SQUONK_DEBUG_MODE:
            SQUONK_SERVICE_DISCOVERY_INTERVAL:
        networks:
        - squonk_back
        healthcheck:
            test: curl --fail http://localhost:8080/coreservices/rest/ping || exit 1
            interval: 20s
            timeout: 5s
            retries: 5

    ################# cellexecutor container #########################################
    # you must create the /squonk/work/docker and /squonk/work/nextflow directories,
    # or point to other directories under /squonk/ using the SQUONK_DOCKER_WORK_DIR and/or
    # SQUONK_NEXTFLOW_WORK_DIR environment variables.
    cellexecutor:
        image: squonk/cellexecutor:${TAG}
        restart: on-failure
        depends_on:
        - rabbitmq
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - /squonk/work:/squonk/work:z
        - /var/maven_repo:/var/maven_repo:ro,z
        - ./images/cellexecutor/logging.properties:/logging.properties:ro,Z
        security_opt:
        - label:type:container_runtime_t # fix SELinux so that we can access docker.sock
        environment:
            RABBITMQ_SQUONK_PASSWORD:
            DOCKER_HOST: unix:///var/run/docker.sock
            SQUONK_CONTAINER_RUNNER_TYPE: docker
            SQUONK_DOCKER_SERVICES_DIR:
            SQUONK_DOCKER_WORK_DIR:
            SQUONK_NEXTFLOW_WORK_DIR:
            SQUONK_DEBUG_MODE:
            registry.url: https://index.docker.io/v1/
            JAVA_OPTS: '"-Djava.util.logging.config.file=/logging.properties"'
        networks:
        - squonk_back

    ################# jobexecutor container #########################################
    # you must create the /squonk/work/docker and /squonk/work/nextflow directories,
    # or point to other directories under /squonk/ using the SQUONK_DOCKER_WORK_DIR and/or
    # SQUONK_NEXTFLOW_WORK_DIR environment variables.
    #
    # See docker-compose-keycloak.yml for accessing this as a secured service
    #
    # Tomcat runs as root as it needs to access the docker socket
    jobexecutor:
        restart: on-failure
        user: 0:0
        depends_on:
        - coreservices
        volumes:
        - ./images/jobexecutor/logging.properties:/usr/local/tomcat/conf/logging.properties:ro,Z
        - /var/run/docker.sock:/var/run/docker.sock
        - /squonk/work:/squonk/work:z
        - /var/maven_repo:/var/maven_repo:ro,z
        security_opt:
        - label:type:container_runtime_t # fix SELinux so that we can access docker.sock
        environment:
            DOCKER_HOST: unix:///var/run/docker.sock
            SQUONK_CONTAINER_RUNNER_TYPE: docker
            SQUONK_DOCKER_WORK_DIR:
            SQUONK_DEBUG_MODE:
            registry.url: https://index.docker.io/v1/
            SQUONK_JOBEXECUTOR_POLL_FOR_SERVICE_DESCRIPTORS: 'true'
            #JAVA_OPTS: '"-Djava.util.logging.config.file=/logging.properties"'
            SQUONK_JOBEXECUTOR_SERVER: "https://nginx"
        networks:
        - squonk_front
        - squonk_back

    ################# portal ##########################################################
    # available on http://${PUBLIC_HOST}/portal
    portal:
        image: squonk/portal:${TAG}
        restart: on-failure
        volumes:
        - ./images/portal/logging.properties:/usr/local/tomcat/conf/logging.properties:ro,Z
        environment:
            SERVICE_CALLBACK: http://localhost:8080/portal
            POSTGRES_SQUONK_PASSWORD:
        networks:
        - squonk_front
        - squonk_back
        healthcheck:
            test: curl --fail http://localhost:8080/portal || exit 1
            interval: 10s
            timeout: 5s
            retries: 5
        depends_on:
            postgres:
                condition: service_started
            coreservices:
                condition: service_healthy

