/*
 * Copyright (c) 2017 Informatics Matters Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'groovy'


String RDBASE = System.getenv('RDBASE')
String RDKitJarFile = '/Code/JavaWrappers/gmwrapper/org.RDKit.jar'
boolean RDKitJava = RDBASE && file(RDBASE + RDKitJarFile).exists()

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.6.8"
    }
}

apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'docker-compose'


dependencies {
    
    compile project(':common')
    compile project(':common-utils')

    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    if (RDKitJava) {
        //println "$RDBASE defined - using that location for RDKit"
        compile files(RDBASE + RDKitJarFile)
    } else {
        //println "Using local org.RDKit.jar"
        compile files("../../lib/rdkit/org.RDKit.jar")
    }

    compile "org.postgresql:postgresql:$postgresDriverVersion"

    testCompile project(':core-test')
}

/* Integration test setup is borrowed from here:
 * http://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing-with-the-testsets-plugin/
 * */
testSets {
    integrationTest
}

//check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

project.integrationTest {
    outputs.upToDateWhen { false }
}

integrationTest {
    //dependsOn rootProject.tasks.dbTestEnvPrepare
    //finalizedBy rootProject.tasks.dbTestEnvShutdown
}

tasks.test.onlyIf { RDKitJava }

dockerCompose.isRequiredBy(integrationTest)

dockerCompose {
    //useComposeFiles = ['docker-compose.yml'] // like 'docker-compose -f <file>'
    // startedServices = ['web'] // list of services to execute when calling 'docker-compose up' or 'docker-compose pull' (when not specified, all services are executed)
    // exitCodeFromService = 'web'
    // scale = [${serviceName1}: 5, ${serviceName2}: 2] // Pass docker compose --scale option like 'docker-compose up --scale serviceName1=5 --scale serviceName2=2'
    // removeOrphans = false // Removes containers for services not defined in the Compose file
    // forceRecreate = true // pass '--force-recreate' when calling 'docker-compose up'
    // upAdditionalArgs = ['--no-deps']

    //captureContainersOutput = true // prints output of all containers to Gradle output - very useful for debugging
    // captureContainersOutputToFile = '/path/to/logFile' // sends output of all containers to a log file

    // stopContainers = false // doesn't call `docker-compose down` - useful for debugging
    // removeContainers = false
    // removeImages = "None" // Other accepted values are: "All" and "Local"
    // removeVolumes = false
}
