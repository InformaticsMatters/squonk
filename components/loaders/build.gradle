/*
 * Copyright (c) 2017 Informatics Matters Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Apply the groovy plugin to add support for Groovy
apply plugin: 'groovy'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    
    compile project(':common')
    compile project(':common-camel')
    compile project(':common-utils')
    compile project(':chemaxon-lib')
    compile project(':chemaxon-camel')
    compile project(':rdkit-lib')

    compile "org.postgresql:postgresql:$postgresDriverVersion"
    
    compile "org.apache.camel:camel-core:$camelVersion"
    compile "org.apache.camel:camel-script:$camelVersion"
    compile "org.apache.camel:camel-groovy:$camelVersion"
    
    // We use the latest groovy 2.x version for building this library
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

}

task chemcentralCreate(dependsOn: 'classes', type: JavaExec) {
    main = 'ChemcentralCreate'
    args = ['dropTables', 'createTables']
    classpath = sourceSets.main.runtimeClasspath
}

task chemblETL(dependsOn: 'classes', type: JavaExec) {
    main = 'ChemblETL'
    classpath = sourceSets.main.runtimeClasspath
}

task drugbankCreateTables(dependsOn: 'classes', type: JavaExec) {
    main = 'DrugbankLoader'
    args = ['createTables']
    classpath = sourceSets.main.runtimeClasspath
}
task drugbankDropTables(dependsOn: 'classes', type: JavaExec) {
    main = 'DrugbankLoader'
    args = ['dropTables']
    classpath = sourceSets.main.runtimeClasspath
}
task drugbankLoadData(dependsOn: 'classes', type: JavaExec) {
    main = 'DrugbankLoader'
    args = ['loadData']
    classpath = sourceSets.main.runtimeClasspath
}
task drugbankReload(dependsOn: 'classes', type: JavaExec) {
    main = 'DrugbankLoader'
    args = ['dropTables', 'createTables', 'loadData']
    classpath = sourceSets.main.runtimeClasspath
}
task drugbankETL(dependsOn: 'classes', type: JavaExec) {
    main = 'DrugBankETL'
    classpath = sourceSets.main.runtimeClasspath
}

task drugbankRDKitLoad(dependsOn: 'classes', type: JavaExec) {
    main = 'rdkit.DrugbankLoader'
    classpath = sourceSets.main.runtimeClasspath
}


task emoleculesCreateTables(dependsOn: 'classes', type: JavaExec) {
    main = 'EMoleculesLoader'
    args = ['createTables']
    classpath = sourceSets.main.runtimeClasspath
}
task emoleculesDropTables(dependsOn: 'classes', type: JavaExec) {
    main = 'EMoleculesLoader'
    args = ['dropTables']
    classpath = sourceSets.main.runtimeClasspath
}
task emoleculesLoadData(dependsOn: 'classes', type: JavaExec) {
    main = 'EMoleculesLoader'
    args = ['loadData']
    classpath = sourceSets.main.runtimeClasspath
}
task emoleculesReload(dependsOn: 'classes', type: JavaExec) {
    main = 'EMoleculesLoader'
    args = ['dropTables', 'createTables', 'loadData']
    classpath = sourceSets.main.runtimeClasspath
}
task emoleculesETL(dependsOn: 'classes', type: JavaExec) {
    main = 'EMoleculesETL'
    classpath = sourceSets.main.runtimeClasspath
}

task pdbLigandReload(dependsOn: 'classes', type: JavaExec) {
    main = 'PdbLigandLoader'
    args = ['dropTables', 'createTables', 'loadData']
    classpath = sourceSets.main.runtimeClasspath
}
task pdbLigandETL(dependsOn: 'classes', type: JavaExec) {
    main = 'PdbLigandETL'
    classpath = sourceSets.main.runtimeClasspath
}