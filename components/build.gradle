description = 'Squonk tools for life sciences'

apply plugin: 'com.bmuschko.docker-remote-api'

/*
 * Copyright (c) 2017 Informatics Matters Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.2'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.7' // needs gradle >= 2.5

        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
    }
}

allprojects {

    group = 'org.squonk.components'

    apply plugin: 'groovy' // Apply the groovy plugin (also adds support for Java)
    apply plugin: 'maven'  // Maven repo stuff

    sourceCompatibility = 1.8
    version = '0.2-SNAPSHOT'

    project.ext.set('camelVersion', '2.18.0')
    // look at the jackson2-version property here (with correct tag) to get the right Jackson version
    // https://github.com/apache/camel/blob/master/parent/pom.xml
    project.ext.set('jacksonVersion', '2.8.4')
    project.ext.set('cdkVersion', '1.5.14')
    project.ext.set('groovyVersion', '2.4.4')
    project.ext.set('weldVersion', '2.3.2.Final')
    project.ext.set('postgresDriverVersion', '9.4-1201-jdbc41')

    // In this section you declare where to find the dependencies of your project
    repositories {
        // Use 'jcenter' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()

        maven {
            credentials {
                // define username and password as environment variables 
                username System.getenv('CHEMAXON_REPO_USERNAME') ?: 'tdudgeon'
                password System.getenv('CHEMAXON_REPO_PASSWORD') ?: 'tdudgeon'
            }
            url "https://repository.chemaxon.com/artifactory/libs-release"
        }

        maven {
            url "https://nexus.ideaconsult.net/content/repositories/thirdparty"
        }

    }

    // In this section you declare the dependencies for your production and test code
    dependencies {
        compile 'org.slf4j:slf4j-simple:1.7.10'

        // Spock for unit testing
        testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
        testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    }
}

// all subprojects are assumed to have artifacts to send to maven repo
subprojects {
    uploadArchives {
        repositories {
            mavenDeployer {
                // hard coded URL as Jenkins puts things to there.
                // If you want to run this locally then make sure that directory exists. 
                repository(url: "file:///var/maven_repo/")
            }
        }
    }
}

def hasChemAxonLicense = file('../data/licenses/license.cxl').exists()

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
    jarFile = 'wrapper/wrapper.jar'
}

/* to run the integration tests first cd into $LAC_HOME/docker and then execute:
./build-external.sh
./configure-external.sh
*/

task integrationTestEnvPrepare(type: Exec) {
    dependsOn 'dockerFileChemServices', 'core-services-server:buildDockerFile', 'cell-executor:dockerBuildImage'

    workingDir '../docker'
    commandLine 'bash', 'int-test-env-prepare.sh'
}

task integrationTestEnvShutdown(type: Exec) {
    workingDir '../docker'
    commandLine 'bash', 'int-test-env-shutdown.sh'
}

task integrationTestEnvClean(type: Exec) {
    commandLine 'bash', '../docker/int-test-env-clean.sh'
}

// tests integration test setup process without running any tests
task integrationTestEnvDryRun {
    dependsOn integrationTestEnvPrepare
    finalizedBy integrationTestEnvShutdown
}

task integrationTestEnvDryRunNoShutdown {
    dependsOn integrationTestEnvPrepare
}


task dbTestEnvPrepare(type: Exec) {
    workingDir '../docker'
    commandLine 'bash', 'db-test-env-prepare.sh'
}

task dbTestEnvShutdown(type: Exec) {
    workingDir '../docker'
    commandLine 'bash', 'db-test-env-shutdown.sh'
}

task createEbsBackendServicesRootZip(type: Zip) {

    copy {
        from '../data/licenses/license.cxl'
        into 'chem-services-root/src/main/html/licenses'
    }

    archiveName = 'ROOT.war'
    destinationDir = file('build/ebs/')
    from 'chem-services-root/src/main/html'
}

task createEbsBackendServicesZip(type: Zip) {

    dependsOn = [
            createEbsBackendServicesRootZip,
            'chem-services-cdk-basic:war',
            'chem-services-chemaxon-basic:war',
            'chem-services-rdkit-basic:war',
            'chem-services-openchemlib-basic:war'
    ]
    archiveName = 'ebs.zip'
    destinationDir = file('build/ebs/')
    from files(
            'chem-services-cdk-basic/build/libs/chem-services-cdk-basic-' + version + '.war',
            'chem-services-chemaxon-basic/build/libs/chem-services-chemaxon-basic-' + version + '.war',
            'chem-services-rdkit-basic/build/libs/chem-services-rdkit-basic-' + version + '.war',
            'chem-services-openchemlib-basic/build/libs/chem-services-openchemlib-basic-' + version + '.war',
            'build/ebs/ROOT.war',

    )
    rename { String fileName ->
        fileName.replace('-' + version, '')
    }

}

project.ext.set('dockerHost', getDockerHost())

String getDockerHost() {

    String d = System.getenv('DOCKER_HOST');
    String h = null;
    if (d == null) {
        h = 'unix:///var/run/docker.sock'
    } else {
        if (d.endsWith('2375')) {
            h = 'http' + d.substring(3)
        } else {
            // assume 2376 and https
            h = 'https' + d.substring(3)
        }
    }
    return h
}

docker {
    println "Using docker host of $dockerHost"
    url = dockerHost
    certPath = null
}

task chemServicesWars(type: Copy) {
    dependsOn = [
            tasks.getByPath(':chem-services-cdk-basic:war'),
            tasks.getByPath(':chem-services-chemaxon-basic:war'),
            tasks.getByPath(':chem-services-rdkit-basic:war'),
            tasks.getByPath(':chem-services-rdkit-search:war'),
            tasks.getByPath(':chem-services-openchemlib-basic:war'),
            tasks.getByPath(':chem-services-smartcyp:war'),
            tasks.getByPath(':chem-services-cpsign:war')
    ]

    from "../data/licenses/license.cxl"
    from "../data/licenses/cpsign0.3pro.license"
    from("chem-services-cdk-basic/build/libs") {
        include '*.war'
        rename '.*', 'chem-services-cdk-basic.war'
    }
    from("chem-services-chemaxon-basic/build/libs") {
        include '*.war'
        rename '.*', 'chem-services-chemaxon-basic.war'
    }
    from("chem-services-rdkit-basic/build/libs") {
        include '*.war'
        rename '.*', 'chem-services-rdkit-basic.war'
    }
    from("chem-services-rdkit-search/build/libs") {
        include '*.war'
        rename '.*', 'chem-services-rdkit-search.war'
    }
    from("chem-services-openchemlib-basic/build/libs") {
        include '*.war'
        rename '.*', 'chem-services-openchemlib-basic.war'
    }
    from("chem-services-smartcyp/build/libs") {
        include '*.war'
        rename '.*', 'chem-services-smartcyp.war'
    }
    from("chem-services-cpsign/build/libs") {
        include '*.war'
        rename '.*', 'chem-services-cpsign.war'
    }
    into 'build/chem-services-basic'

}



task dockerFileChemServices(type: Dockerfile) {

    dependsOn = [chemServicesWars]


    destFile = project.file('build/chem-services-basic/Dockerfile')
    // if changing the version you must also update the hardcoded version number in org.squonk.camel.rdkit.processor.RDKitMoleculeProcessor
    from "informaticsmatters/rdkit_java_tomcat:Release_2017_03_1"
    maintainer 'Tim Dudgeon <tdudgeon@informaticsmatters.com>'

    runCommand("rm -rf /usr/local/tomcat/webapps/*")

    addFile('*.war', "/usr/local/tomcat/webapps/")
    addFile('license.cxl', 'license.cxl')
    addFile('cpsign0.3pro.license', 'cpsign0.3pro.license')

    environmentVariable("CHEMAXON_LICENSE_URL", "/usr/local/tomcat/license.cxl")
    environmentVariable("CPSIGN_LICENSE_URL",   "/usr/local/tomcat/cpsign0.3pro.license")
    environmentVariable("CPSIGN_MODEL_DIR",     "/cpsign_data")

    exposePort(8080)
}

task dockerImageChemServices(type: DockerBuildImage) {
    dependsOn dockerFileChemServices
    inputDir = dockerFileChemServices.destFile.parentFile
    tag = "squonk/chem-services-basic"
}
